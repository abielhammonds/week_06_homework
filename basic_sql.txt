PRACTICE PROBLEM 1

Write a query to select all of the columns in the tutorial.us_housing_units table without using *.

SELECT year,
       month,
       month_name,
       south,
       west,
       midwest,
       northeast
  FROM tutorial.us_housing_units

I've listed each column name in the data set to call all of the columns.


PRACTICE PROBLEM 2

Write a query to select all of the columns in tutorial.us_housing_units and rename them so that their first letters are capitalized.

SELECT year as "Year",
       month as "Month",
       month_name as "Month Name",
       south as "South",
       west as "West",
       midwest as "Midwest",
       northeast as "Northeast"
  FROM tutorial.us_housing_units

I've renamed each column with a capital letter and space instead of underscore for month_name.

PRACTICE PROBLEM 3

Write a query that uses the LIMIT command to restrict the result set to only 15 rows.

SELECT *
  FROM tutorial.us_housing_units
 LIMIT 15

This query has called the first 15 rows of the data set.

PRACTICE PROBLEM 4

Did the West Region ever produce more than 50,000 housing units in one month?

SELECT year,
       month,
       month_name,
       west
  FROM tutorial.us_housing_units
 WHERE west > 50

This query called the year, month, month_name, and west columns - only if the number (of housing units) in the west column was greater than 50(thousand).
The answer is yes, there were 3 months where the west region produced more than 50,000 housing units.


PRACTICE PROBLEM 5

Did the South Region ever produce 20,000 or fewer housing units in one month?

SELECT year,
       month,
       month_name,
       south
  FROM tutorial.us_housing_units
 WHERE south <= 20

This query called the year, month, month_name, and south columns - only if the number (of housing units) in the south column was less than or equal to 20(thousand).
The answer is yes, there were 4 months where the south region produced 20,000 or fewer housing units.

PRACTICE PROBLEM 6

Write a query that only shows rows for which the month name is February.

SELECT *
  FROM tutorial.us_housing_units
 WHERE month_name = 'February'

When I use the equal operator, I can set the month_name column equal to the value 'February'.

PRACTICE PROBLEM 7

Write a query that only shows rows for which the month_name starts with the letter "N" or an earlier letter in the alphabet.

SELECT *
  FROM tutorial.us_housing_units
 WHERE month_name <= 'N'

This query returned all months that start before 'N' alphabetically (ex: December, May).  
It did not return November because Nov...comes after N in the alphabet.
It did not return September or October because S and O come after N in the alphabet.

PRACTICE PROBLEM 8

Write a query that calculates the sum of all four regions in a separate column.

SELECT year,
       month,
       month_name,
       west,
       south,
       midwest,
       northeast,
       west + south + midwest + northeast AS all_regions
  FROM tutorial.us_housing_units

This query returned all column (I listed them, you can't use *) and a calculated column adding the number of all housing units for each region together.

PRACTICE PROBLEM 9

Write a query that returns all rows for which more units were produced in the West region than in the Midwest and Northeast combined.

SELECT year,
       month,
       month_name,
       west,
       midwest,
       northeast,
       midwest + northeast as west_and_northeast
    FROM tutorial.us_housing_units
  WHERE west > (midwest + northeast)

Well, this was interesting!  I included the arithmatic in the where statement to limit the number of rows to what was asked.
Then I went back and added the midwest + northeast calculated column, to visually check the results.
If I included the west > (midwest + northeast) in the select statement, I get a boolean column of true/false values.
But then, when I tried to limit using a where statement, on my calculated column (boolean = true) I got an error.

PRACTICE PROBLEM 10

Write a query that calculates the percentage of all houses completed in the United States represented by each region. Only return results from the year 2000 and later.

SELECT year,
       month,
       month_name,
       south / (south + west + midwest + northeast) * 100 AS percent_south,
       west / (south + west + midwest + northeast) * 100 AS percent_west,
       midwest / (south + west + midwest + northeast) * 100 AS percent_midwest,
       northeast / (south + west + midwest + northeast) * 100 AS percent_northeast
    FROM tutorial.us_housing_units
  WHERE year  >= 2000

This query returns the calcuated columns and limits results to years greater than or equal to 2000.
For the sake of brevity, I only inlcuded the calculated columns - not each region's original data.

PRACTICE PROBLEM 11

Write a query that returns all rows for which Ludacris was a member of the group.

SELECT *
  FROM tutorial.billboard_top_100_year_end
 WHERE artist LIKE 'Lud%'

I used the beginning of the artist name and the % wildcard to return the name Ludacris in the artist column.

PRACTICE PROBLEM 12

Write a query that returns all rows for which the first artist listed in the group has a name that begins with "DJ".

SELECT *
  FROM tutorial.billboard_top_100_year_end
 WHERE artist LIKE 'DJ%'

I used LIKE and the % wildcard to ensure that artist names start with capital DJ.

PRACTICE PROBLEM 13

Write a query that shows all of the entries for Elvis and M.C. Hammer.

SELECT *
  FROM tutorial.billboard_top_100_year_end
  WHERE artist IN ('Elvis Presley', 'M.C. Hammer', 'Hammer')

To generate the list of artist names I used in the WHERE statement, I first did queries for WHERE artist LIKE 'Elvis%' and '%Hammer'.  
This gave the exact spelling of the artist names I needed.

PRACTICE PROBLEM 14

Write a query that shows all top 100 songs from January 1, 1985 through December 31, 1990.

SELECT *
  FROM tutorial.billboard_top_100_year_end
 WHERE year BETWEEN '1985' AND '1990'

Because 1985 and 1990 are numbers, this query worked with and without quotes around those two years.

PRACTICE PROBLEM 15

Write a query that shows all of the rows for which song_name is null.

SELECT *
  FROM tutorial.billboard_top_100_year_end
 WHERE song_name IS NULL

This query returned rows where the song name is missing (blank).

PRACTICE PROBLEM 16

Write a query that surfaces all rows for top-10 hits for which Ludacris is part of the Group.

SELECT *
  FROM tutorial.billboard_top_100_year_end
 WHERE year_rank <= 10
   AND "group" ILIKE '%Luda%'

This query returns all rows that include Ludacris in the group name.  So there are duplicate rows because each row, for a given group, also has a row for each artist.

PRACTICE PROBLEM 17

Write a query that surfaces the top-ranked records in 1990, 2000, and 2010.

SELECT *
  FROM tutorial.billboard_top_100_year_end
 WHERE year IN (1990, 2000, 2010)
   AND year_rank = 1

This query gives the number 1 song in each of those years.


PRACTICE PROBLEM 18

Write a query that lists all songs from the 1960s with "love" in the title.

SELECT *
  FROM tutorial.billboard_top_100_year_end
 WHERE year BETWEEN 1960 AND 1969
   AND song_name ILIKE '%love%'

This query returns song that have Love anywhere in the title - achieved by using ILIKE and wildcards before and after love.  This gets captial and lower case Love.


PRACTICE PROBLEM 19

Write a query that returns all rows for top-10 songs that featured either Katy Perry or Bon Jovi.

SELECT *
  FROM tutorial.billboard_top_100_year_end
 WHERE year_rank <= 10
   AND ("artist" = 'Katy Perry' OR "artist" ILIKE '%jovi%')

This query was a bit tricky because Bon Jovi was listed two different ways, and using ILIKE for %perry% returned an additional Perry artist.

PRACTICE PROBLEM 20

Write a query that returns all songs with titles that contain the word "California" in either the 1970s or 1990s.

SELECT *
  FROM tutorial.billboard_top_100_year_end
 WHERE song_name ILIKE '%california%'
   AND (year BETWEEN 1970 AND 1979 OR year BETWEEN 1990 AND 1999)

This was tricky too!  I needed to list the song name first (I had it last the first time) and then combine the years with a parenthesis to get the exact results I wanted.

PRACTICE PROBLEM 21

Write a query that lists all top-100 recordings that feature Dr. Dre before 2001 or after 2009.

SELECT *
  FROM tutorial.billboard_top_100_year_end
 WHERE artist ILIKE '%dre'
   AND (year <= 2001 OR year >= 2009)

This query returned all songs in years less than or equal to (aka before) 2001 and greater than or equal to (aka after) 2009.

PRACTICE PROBLEM 22

Write a query that returns all rows for songs that were on the charts in 2013 and do not contain the letter "a".

SELECT *
  FROM tutorial.billboard_top_100_year_end
 WHERE year = 2013
   AND song_name NOT ILIKE '%a%'

Using ILIKE and the wildcards before/aster 'a' ensures any songs with the letter 'a' in them are excluded.

PRACTICE PROBLEM 23

Write a query that returns all rows from 2012, ordered by song title from Z to A.

SELECT *
  FROM tutorial.billboard_top_100_year_end
 WHERE year = 2012
 ORDER BY song_name DESC

This query sorts song name in descending order, after filtering by the year 2012.


PRACTICE PROBLEM 24

Write a query that returns all rows from 2010 ordered by rank, with artists ordered alphabetically for each song.

SELECT *
  FROM tutorial.billboard_top_100_year_end
  WHERE year = 2010
 ORDER BY year_rank, artist

In this query, if there are multiple artists feartured, the query sorts the artist names alphabetically.

PRACTICE PROBLEM 25

Write a query that shows all rows for which T-Pain was a group member, 
ordered by rank on the charts, from lowest to highest rank (from 100 to 1).

SELECT *
  FROM tutorial.billboard_top_100_year_end
  WHERE "group" ILIKE '%t-pain%'
  ORDER BY year_rank DESC

Another tricky one!  I couldn't get any results for T-Pain until I ran the answer and was reminded that 'group'
needs double quotations because that is also a keyword in SQL.

PRACTICE PROBLEM 26

Write a query that returns songs that ranked between 10 and 20 (inclusive) in 1993, 2003, or 2013. 
Order the results by year and rank, and leave a comment on each line of the WHERE clause to indicate what that line does.

SELECT *
  FROM tutorial.billboard_top_100_year_end
  WHERE (year_rank BETWEEN 10 AND 20 --this line filters to songs ranked 10 - 20
    AND year IN (1993, 2003, 2013)) --this line filters to years 1993, 2003, and 2013
  ORDER BY year, year_rank


Completed!  I like that the long WHERE clause can be separated into two lines.
